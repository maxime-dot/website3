default:
  tags:
  - web

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "develop"
# && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always

stages:
  - test
  - build
  - deploy

variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGEE
  USERNAME: $USERNAME
  HOST: $HOST
  PASSWORD_SERVER: $PASSWORD_SERVER
  DEV_ENDPOINT: https://dev.goavana.com
  PROD_ENDPOINT: https://www.akata-goavana.com
  KEYS: $KEYS
  USER: $USER
  IP: $IP

run_unit_tests:
  stage: test
  script:
    - echo "Running unit test"

run_test_performance:
  rules:
    - if: $CI_COMMIT_BRANCH != "prod"
      when: never
    - when: always
  stage: test
  script:
    - echo "Running performance test"
  environment:
    name: production

build_image:
  stage: build
  before_script:
    - export PVERSION=$(cat package.json | jq -r .version)
    - export VERSION=$PVERSION.$CI_PIPELINE_ID
    - echo $VERSION > version.txt
  script:
    - docker build -t $IMAGE_NAME:$VERSION .
  artifacts:
    paths:
      - version.txt

build_for_production:
  rules:
    - if: $CI_COMMIT_BRANCH != "prod"
      when: never
    - when: always
  stage: build
  script:
    ssh -i $KEYS $USER@$IP "
      su nodejs &&
      cd &&
      cd website-3.0 &&
      git pull origin prod &&
      npm install &&
      rm -rf .next &&
      npm run build
      "
  environment:
    name: production

deploy_to_production:
  rules:
    - if: $CI_COMMIT_BRANCH != "prod"
      when: never
    - when: always
  stage: build
  script:
    ssh -i $KEYS $USER@$IP "
      su nodejs &&
      cd &&
      pm2 restart 0
      "
  environment:
    name: production
    url: $PROD_ENDPOINT

push_image:
  stage: build
  needs:
    - build_image
  before_script:
    - export VERSION=$(cat version.txt)
    - docker login -u $CI_REGISTRY_USERNAME -p $CI_REGISTRY_PASSWORDD
  script:
    - docker push $IMAGE_NAME:$VERSION

deploy_to_dev:
  stage: deploy
  before_script:
    - export VERSION=$(cat version.txt)
    - chmod +x delete_image.sh
    - sshpass -p $PASSWORD_SERVER scp -o StrictHostKeyChecking=no delete_image.sh docker-compose.yml $USERNAME@$HOST:/home/ubuntu
  script:
    - sshpass -p $PASSWORD_SERVER ssh -o StrictHostKeyChecking=no -l $USERNAME $HOST "
        docker login -u $CI_REGISTRY_USERNAME -p $CI_REGISTRY_PASSWORDD &&
        export IMAGE_NAMEE=$IMAGE_NAME &&
        export IMAGE_TAGG=$VERSION &&
        docker-compose down &&
        ./delete_image.sh &&
        docker-compose up -d "
  environment:
    name: development
    url: $DEV_ENDPOINT

